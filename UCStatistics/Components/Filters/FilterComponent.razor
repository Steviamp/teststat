@using UCStatistics.Models
@using UCStatistics.Shared.DTOs
@using UCStatistics.Services
@using MudBlazor

<MudCard Class="mb-4">
    <MudCardContent>
        <MudPaper Elevation="1" Class="pa-4 mb-4">
            <MudGrid GutterSize="GutterSize.Small" AlignItems="Center" Justify="Justify.FlexStart">

                @* Date Filters - Only show if ShowDateFilters is true *@
                @if (ShowDateFilters)
                {
                    <!-- Date From -->
                    <MudItem xs="12" sm="5" md="3">
                        <MudDatePicker Label="Date From"
                                       Date="Criteria.DateFrom"
                                       DateChanged="d => OnDateChanged(d, true)"
                                       Variant="Variant.Outlined"
                                       Clearable="false" />
                    </MudItem>
                    <!-- Date To -->
                    <MudItem xs="12" sm="5" md="3">
                        <MudDatePicker Label="Date To"
                                       Date="Criteria.DateTo"
                                       DateChanged="d => OnDateChanged(d, false)"
                                       Variant="Variant.Outlined"
                                       Clearable="false" />
                    </MudItem>
                }

                <!-- Branch Filter -->
                @if (CanSelectBranch)
                {
                    <MudItem xs="12" sm="4" md="2">
                        <MudSelect T="int?"
                                   Label="Branch"
                                   Placeholder="All Branches"
                                   Value="Criteria.OfficeNr"
                                   ValueChanged="OnBranchChanged"
                                   ValueExpression="() => Criteria.OfficeNr"
                                   Clearable="@CanClearBranch"
                                   Variant="Variant.Outlined"
                                   Disabled="@IsBranchDisabled">
                            @if (CanClearBranch)
                            {
                                <MudSelectItem T="int?" Value="@( (int?)null )">
                                    All Branches
                                </MudSelectItem>
                            }
                            @if (FilteredBranchOptions?.Any() == true)
                            {
                                @foreach (var b in FilteredBranchOptions)
                                {
                                    <MudSelectItem T="int?" Value="@b.Id">
                                        @b.Name
                                    </MudSelectItem>
                                }
                            }
                            else
                            {
                                <MudSelectItem T="int?" Value="@( (int?)null )" Disabled="true">
                                    No branches available
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

                <!-- Area Filter -->
                @if (CanSelectArea)
                {
                    <MudItem xs="12" sm="4" md="2">
                        <MudSelect T="int?"
                                   Label="Area"
                                   Placeholder="All Areas"
                                   Value="Criteria.Level3Nr"
                                   ValueChanged="OnAreaChanged"
                                   ValueExpression="() => Criteria.Level3Nr"
                                   Clearable="true"
                                   Variant="Variant.Outlined"
                                   Disabled="@IsAreaDisabled">
                            <MudSelectItem T="int?" Value="@( (int?)null )">
                                All Areas
                            </MudSelectItem>
                            @foreach (var a in FilteredAreaOptions)
                            {
                                <MudSelectItem T="int?" Value="@a.Id">
                                    @a.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

                <!-- City Filter -->
                @if (CanSelectCity)
                {
                    <MudItem xs="12" sm="4" md="2">
                        <MudSelect T="int?"
                                   Label="City"
                                   Placeholder="All Cities"
                                   Value="Criteria.Level2Nr"
                                   ValueChanged="OnCityChanged"
                                   ValueExpression="() => Criteria.Level2Nr"
                                   Clearable="true"
                                   Variant="Variant.Outlined"
                                   Disabled="@IsCityDisabled">
                            <MudSelectItem T="int?" Value="@( (int?)null )">
                                All Cities
                            </MudSelectItem>
                            @foreach (var c in FilteredCityOptions)
                            {
                                <MudSelectItem T="int?" Value="@c.Id">
                                    @c.Name
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

                @* Service Filter - Only show if ShowServiceFilter is true *@
                @if (ShowServiceFilter)
                {
                    <MudItem xs="12" sm="4" md="2">
                        <MudSelect T="int?"
                                   Label="Service"
                                   Value="Criteria.ServiceCode"
                                   ValueChanged="OnServiceChanged"
                                   ValueExpression="() => Criteria.ServiceCode"
                                   Clearable="true"
                                   Variant="Variant.Outlined">
                            <MudSelectItem T="int?" Value="@( (int?)null )">All Services</MudSelectItem>
                            @foreach (var s in ServiceOptions)
                            {
                                <MudSelectItem T="int?" Value="@s.Id">@s.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

                <!-- Role Info Display -->
                @if (CurrentUser != null && CurrentUser.Role == UserRole.Supervisor)
                {
                    <MudItem xs="12">
                        <MudAlert Severity="Severity.Info" Class="mt-2">
                            <MudText Typo="Typo.body2">
                                <strong>Supervisor Access:</strong> You can only view data for your branch (@CurrentUser.SupervisorBranch)
                            </MudText>
                        </MudAlert>
                    </MudItem>
                }

            </MudGrid>
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public FilterCriteria Criteria { get; set; } = new();
    [Parameter] public EventCallback<FilterCriteria> CriteriaChanged { get; set; }
    [Parameter] public List<OfficeInfo> OfficesList { get; set; } = new();
    [Parameter] public List<ServiceInfo> ServicesList { get; set; } = new();
    [Parameter] public bool ShowDateFilters { get; set; } = true;
    [Parameter] public bool ShowServiceFilter { get; set; } = false;
    [CascadingParameter] public ActiveDirectoryUserDto? CurrentUser { get; set; }

    // Role-based access control properties
    private bool CanSelectBranch => CurrentUser?.Role == UserRole.Administrator || CurrentUser?.Role == UserRole.StatisticsUser;
    private bool CanSelectArea => CurrentUser?.Role == UserRole.Administrator || CurrentUser?.Role == UserRole.StatisticsUser;
    private bool CanSelectCity => CurrentUser?.Role == UserRole.Administrator || CurrentUser?.Role == UserRole.StatisticsUser;
    private bool CanClearBranch => CurrentUser?.Role == UserRole.Administrator || CurrentUser?.Role == UserRole.StatisticsUser;

    private bool IsBranchDisabled => CurrentUser?.Role == UserRole.Supervisor;
    private bool IsAreaDisabled => CurrentUser?.Role == UserRole.Supervisor;
    private bool IsCityDisabled => CurrentUser?.Role == UserRole.Supervisor;

    // Helper class for options
    private class OptionItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;

        public override bool Equals(object? obj)
        {
            return obj is OptionItem item && Id == item.Id;
        }

        public override int GetHashCode()
        {
            return Id.GetHashCode();
        }
    }

    // Filtered options based on user role
    private IEnumerable<OptionItem> FilteredBranchOptions
    {
        get
        {
            var options = OfficesList
                .Where(x => !string.IsNullOrEmpty(x.OfficeName))
                .Select(x => new OptionItem { Id = x.OfficeNr, Name = x.OfficeName })
                .Distinct()
                .ToList();

            if (CurrentUser?.Role == UserRole.Supervisor && !string.IsNullOrEmpty(CurrentUser.SupervisorBranch))
            {
                if (int.TryParse(CurrentUser.SupervisorBranch, out int branchNumber))
                {
                    options = options.Where(o => o.Id == branchNumber).ToList();
                }
            }

            return options;
        }
    }

    private IEnumerable<OptionItem> FilteredAreaOptions
    {
        get
        {
            var options = OfficesList
                .Where(x => !string.IsNullOrEmpty(x.Level3Name))
                .Select(x => new OptionItem { Id = x.Level3Nr, Name = x.Level3Name })
                .Distinct()
                .ToList();

            if (CurrentUser?.Role == UserRole.Supervisor && !string.IsNullOrEmpty(CurrentUser.SupervisorBranch))
            {
                if (int.TryParse(CurrentUser.SupervisorBranch, out int branchNumber))
                {
                    options = options.Where(o => OfficesList.Any(office => office.OfficeNr == branchNumber && office.Level3Nr == o.Id)).ToList();
                }
            }

            return options;
        }
    }

    private IEnumerable<OptionItem> FilteredCityOptions
    {
        get
        {
            var baseQuery = OfficesList.AsQueryable();

            if (Criteria.Level3Nr != null)
            {
                baseQuery = baseQuery.Where(o => o.Level3Nr == Criteria.Level3Nr);
            }

            if (CurrentUser?.Role == UserRole.Supervisor && !string.IsNullOrEmpty(CurrentUser.SupervisorBranch))
            {
                if (int.TryParse(CurrentUser.SupervisorBranch, out int branchNumber))
                {
                    baseQuery = baseQuery.Where(o => o.OfficeNr == branchNumber);
                }
            }

            return baseQuery
                .Where(o => !string.IsNullOrEmpty(o.Level2Name))
                .Select(o => new OptionItem { Id = o.Level2Nr, Name = o.Level2Name })
                .Distinct()
                .ToList();
        }
    }

    private IEnumerable<OptionItem> ServiceOptions =>
        ServicesList
            .Where(s => !string.IsNullOrEmpty(s.ServiceName))
            .Select(s => new OptionItem { Id = s.ServiceCode, Name = s.ServiceName })
            .Distinct()
            .ToList();

    protected override void OnInitialized()
    {
        Console.WriteLine($"FilterComponent OnInitialized - CurrentUser: {CurrentUser?.UserName}, Role: {CurrentUser?.Role}");

        // Set default branch for Supervisor role
        if (CurrentUser?.Role == UserRole.Supervisor && !string.IsNullOrEmpty(CurrentUser.SupervisorBranch))
        {
            if (int.TryParse(CurrentUser.SupervisorBranch, out int branchNumber))
            {
                Criteria.OfficeNr = branchNumber;
            }
        }
    }

    protected override void OnParametersSet()
    {
        Console.WriteLine($"FilterComponent OnParametersSet - CurrentUser: {CurrentUser?.UserName}, Role: {CurrentUser?.Role}");
        Console.WriteLine($"FilterComponent - OfficesList count: {OfficesList?.Count}, ServicesList count: {ServicesList?.Count}");
    }

    // Event handlers
    private async Task OnDateChanged(DateTime? date, bool isFrom)
    {
        Console.WriteLine($"OnDateChanged called - Date: {date}, IsFrom: {isFrom}");

        if (date is null) return;

        if (isFrom)
            Criteria.DateFrom = date.Value;
        else
            Criteria.DateTo = date.Value;

        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnBranchChanged(int? newBranch)
    {
        Console.WriteLine($"OnBranchChanged called - NewBranch: {newBranch}, CurrentUser Role: {CurrentUser?.Role}");

        // For Supervisor role, don't allow changing branch
        if (CurrentUser?.Role == UserRole.Supervisor)
        {
            Console.WriteLine("Branch change blocked for Supervisor role");
            return;
        }

        Criteria.OfficeNr = newBranch;
        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnAreaChanged(int? newArea)
    {
        Console.WriteLine($"OnAreaChanged called - NewArea: {newArea}, CurrentUser Role: {CurrentUser?.Role}");

        // For Supervisor role, don't allow changing area if it would affect their branch
        if (CurrentUser?.Role == UserRole.Supervisor)
        {
            Console.WriteLine("Area change blocked for Supervisor role");
            return;
        }

        Criteria.Level3Nr = newArea;
        if (newArea == null)
            Criteria.OfficeNr = null;

        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnCityChanged(int? newCity)
    {
        Console.WriteLine($"OnCityChanged called - NewCity: {newCity}, CurrentUser Role: {CurrentUser?.Role}");

        // For Supervisor role, don't allow changing city if it would affect their branch
        if (CurrentUser?.Role == UserRole.Supervisor)
        {
            Console.WriteLine("City change blocked for Supervisor role");
            return;
        }

        Criteria.Level2Nr = newCity;
        if (newCity == null)
            Criteria.OfficeNr = null;

        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnServiceChanged(int? svc)
    {
        Console.WriteLine($"OnServiceChanged called - Service: {svc}");

        Criteria.ServiceCode = svc;
        await CriteriaChanged.InvokeAsync(Criteria);
    }
}