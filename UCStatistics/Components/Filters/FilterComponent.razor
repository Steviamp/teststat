@using UCStatistics.Shared.DTOs
@using MudBlazor

<MudCard Class="mb-4">
    <MudCardContent>
        <MudPaper Elevation="1" Class="pa-4 mb-4">
            <MudGrid GutterSize="GutterSize.Small" AlignItems="Center" Justify="Justify.FlexStart">

                @* Date Filters - Only show if ShowDateFilters is true *@
                @if (ShowDateFilters)
                {
                    <!-- Date From -->
                    <MudItem xs="12" sm="5" md="3">
                        <MudDatePicker Label="Date From"
                                       Date="Criteria.DateFrom"
                                       DateChanged="d => OnDateChanged(d, true)"
                                       Variant="Variant.Outlined"
                                       Clearable="false" />
                    </MudItem>
                    <!-- Date To -->
                    <MudItem xs="12" sm="5" md="3">
                        <MudDatePicker Label="Date To"
                                       Date="Criteria.DateTo"
                                       DateChanged="d => OnDateChanged(d, false)"
                                       Variant="Variant.Outlined"
                                       Clearable="false" />
                    </MudItem>
                }

                <!-- Branch Filter -->
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                               Label="Branch"
                               Placeholder="All Branches"
                               Value="Criteria.OfficeNr"
                               ValueChanged="OnBranchChanged"
                               ValueExpression="() => Criteria.OfficeNr"
                               Clearable="true"
                               Variant="Variant.Outlined">
                        <MudSelectItem T="int?" Value="@( (int?)null )">
                            All Branches
                        </MudSelectItem>
                        @foreach (var b in BranchOptions)
                        {
                            <MudSelectItem T="int?" Value="@b.Id">
                                @b.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- Area Filter -->
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                               Label="Area"
                               Placeholder="All Areas"
                               Value="Criteria.Level3Nr"
                               ValueChanged="OnAreaChanged"
                               ValueExpression="() => Criteria.Level3Nr"
                               Clearable="true"
                               Variant="Variant.Outlined">
                        <MudSelectItem T="int?" Value="@( (int?)null )">
                            All Areas
                        </MudSelectItem>
                        @foreach (var a in AreaOptions)
                        {
                            <MudSelectItem T="int?" Value="@a.Id">
                                @a.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                <!-- City Filter -->
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                               Label="City"
                               Placeholder="All Cities"
                               Value="Criteria.Level2Nr"
                               ValueChanged="OnCityChanged"
                               ValueExpression="() => Criteria.Level2Nr"
                               Clearable="true"
                               Variant="Variant.Outlined">
                        <MudSelectItem T="int?" Value="@( (int?)null )">
                            All Cities
                        </MudSelectItem>
                        @foreach (var c in CityOptions)
                        {
                            <MudSelectItem T="int?" Value="@c.Id">
                                @c.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>

                @* Service Filter - Only show if ShowServiceFilter is true *@
                @if (ShowServiceFilter)
                {
                    <MudItem xs="12" sm="4" md="2">
                        <MudSelect T="int?"
                                   Label="Service"
                                   Value="Criteria.ServiceCode"
                                   ValueChanged="OnServiceChanged"
                                   ValueExpression="() => Criteria.ServiceCode"
                                   Clearable="true"
                                   Variant="Variant.Outlined">
                            <MudSelectItem T="int?" Value="@( (int?)null )">All Services</MudSelectItem>
                            @foreach (var s in ServiceOptions)
                            {
                                <MudSelectItem T="int?" Value="@s.Id">@s.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>
                }

            </MudGrid>
        </MudPaper>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public FilterCriteria Criteria { get; set; } = new();
    [Parameter] public EventCallback<FilterCriteria> CriteriaChanged { get; set; }
    [Parameter] public List<OfficeInfo> OfficesList { get; set; } = new();
    [Parameter] public List<ServiceInfo> ServicesList { get; set; } = new();
    [Parameter] public bool ShowDateFilters { get; set; } = true;
    [Parameter] public bool ShowServiceFilter { get; set; } = false;

    // Computed properties για τα options
    private IEnumerable<(int Id, string Name)> BranchOptions
        => OfficesList
            .Select(x => (x.OfficeNr, x.OfficeName))
            .Distinct();

    private IEnumerable<(int Id, string Name)> AreaOptions =>
        OfficesList
            .Select(x => (x.Level3Nr, x.Level3Name))
            .Distinct();

    private IEnumerable<(int Id, string Name)> CityOptions =>
        OfficesList
            .Where(o => Criteria.Level3Nr == null || o.Level3Nr == Criteria.Level3Nr)
            .Select(o => (o.Level2Nr, o.Level2Name))
            .Distinct();

    private IEnumerable<(int Id, string Name)> ServiceOptions
        => ServicesList.Select(s => (s.ServiceCode, s.ServiceName)).Distinct();

    // Event handlers
    private async Task OnDateChanged(DateTime? date, bool isFrom)
    {
        if (date is null) return;

        if (isFrom)
            Criteria.DateFrom = date.Value;
        else
            Criteria.DateTo = date.Value;

        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnBranchChanged(int? newBranch)
    {
        Criteria.OfficeNr = newBranch;
        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnAreaChanged(int? newArea)
    {
        Criteria.Level3Nr = newArea;
        if (newArea == null)
            Criteria.OfficeNr = null;

        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnCityChanged(int? newCity)
    {
        Criteria.Level2Nr = newCity;
        if (newCity == null)
            Criteria.OfficeNr = null;

        await CriteriaChanged.InvokeAsync(Criteria);
    }

    private async Task OnServiceChanged(int? svc)
    {
        Criteria.ServiceCode = svc;
        await CriteriaChanged.InvokeAsync(Criteria);
    }
}