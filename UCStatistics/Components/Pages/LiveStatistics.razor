@page "/live"
@rendermode InteractiveServer
@using MudBlazor
@using UCStatistics.Components.Filters
@using UCStatistics.Services
@using UCStatistics.Shared.DTOs
@using UCStatistics.Components.Tables
@inject ReportService ReportService
@inject IDialogService DialogService

<MudThemeProvider />
<MudSnackbarProvider MaxDisplayedSnackbars="3" PreventDuplicates="true" />
<MudDialogProvider />
<MudPopoverProvider />

<PageTitle>Live Statistics</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Live Statistics</MudText>

<!-- Filter Panel Component -->
<FilterComponent 
Criteria="@criteria"
CriteriaChanged="@OnCriteriaChanged"
OfficesList="@officesList"
ServicesList="@servicesList"
ShowDateFilters="false"
ShowServiceFilter="false" />

<MudTabs>
    <MudTabPanel Text="By Branch">
        @if (isLoading)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else if (data?.Any() ?? false)
        {
            <LiveBranchTable Data="data" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No data for selected filters.</MudAlert>
        }
    </MudTabPanel>
    <MudTabPanel Text="By Service">
        @if (isLoading)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else if (serviceData?.Any() ?? false)
        {
            <LiveServiceTable Data="serviceData" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No data for selected filters.</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

@code {
    private List<OfficeInfo> officesList = new();
    private List<ServiceInfo> servicesList = new(); 

    private IEnumerable<LiveBranchDto> data;
    private IEnumerable<LiveServiceDto> serviceData;
    private bool isLoading;
    private FilterCriteria criteria = new FilterCriteria{};

    protected override async Task OnInitializedAsync()
    {
        officesList = (await ReportService.GetOfficesAsync()).ToList();
        servicesList = (await ReportService.GetServicesAsync()).ToList();
        await LoadData();
    }

    // Event handler for filter changes
    private async Task OnCriteriaChanged(FilterCriteria newCriteria)
    {
        criteria = newCriteria;
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        data = await ReportService.GetLiveSummaryAsync(criteria);
        serviceData = await ReportService.GetLiveServiceSummaryAsync(criteria);

        isLoading = false;
        StateHasChanged();
    }
}