@page "/servicesummary"
@rendermode InteractiveServer
@using System.Linq
@using UCStatistics.Services
@using UCStatistics.Shared.DTOs
@using UCStatistics.Components.Tables
@inject ReportService ReportService

<PageTitle>Service Summary</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Service Summary Statistics</MudText>

<!-- Filter Summary Card -->
<MudCard Class="mb-4">
    <MudCardContent>
        <MudText Typo="Typo.h6" Class="mb-2">Current Filters:</MudText>
        <MudText>
            <strong>Date Range:</strong> @criteria.DateFrom.ToString("yyyy-MM-dd") to @criteria.DateTo.ToString("yyyy-MM-dd")
        </MudText>
        @if (criteria.Level3Nr.HasValue)
        {
            <MudText>
                <strong>Area:</strong> @GetAreaName(criteria.Level3Nr.Value)
            </MudText>
        }
        @if (criteria.Level2Nr.HasValue)
        {
            <MudText>
                <strong>City:</strong> @GetCityName(criteria.Level2Nr.Value)
            </MudText>
        }
        @if (criteria.OfficeNr.HasValue)
        {
            <MudText>
                <strong>Branch:</strong> @GetOfficeName(criteria.OfficeNr.Value)
            </MudText>
        }
        else
        {
            <MudText>
                <strong>Branch:</strong> All Branches
            </MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="LoadData"
                   StartIcon="Icons.Material.Filled.Refresh">
            Load Service Stats
        </MudButton>
    </MudCardActions>
</MudCard>

@if (isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
    <MudAlert Severity="Severity.Info">Loading service data...</MudAlert>
}
else if (serviceData != null && serviceData.Any())
{
    <MudCard>
        <MudCardContent>
            <div style="overflow-x: auto;">
                <ServiceSummaryTable Data="serviceData" />
            </div>
        </MudCardContent>
    </MudCard>
}
else if (serviceData != null)
{
    <MudAlert Severity="Severity.Warning">
        No service statistics available for the selected filters.
    </MudAlert>
}

@code {
    private List<OfficeInfo> officesList = new();
    private FilterCriteria criteria = new FilterCriteria
        {
            DateFrom = DateTime.Today.AddDays(-7),
            DateTo = DateTime.Today,
            Level2Nr = null,
            Level3Nr = null,
            OfficeNr = null
        };

    private IEnumerable<ServiceSummaryDto>? serviceData;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        officesList = (await ReportService.GetOfficesAsync()).ToList();
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            serviceData = await ReportService.GetServiceSummaryAsync(criteria);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading service data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetAreaName(int level3Nr)
    {
        return officesList.FirstOrDefault(x => x.Level3Nr == level3Nr)?.Level3Name ?? "Unknown";
    }

    private string GetCityName(int level2Nr)
    {
        return officesList.FirstOrDefault(x => x.Level2Nr == level2Nr)?.Level2Name ?? "Unknown";
    }

    private string GetOfficeName(int officeNr)
    {
        return officesList.FirstOrDefault(x => x.OfficeNr == officeNr)?.OfficeName ?? "Unknown";
    }
}