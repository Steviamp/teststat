@page "/historical"
@rendermode InteractiveServer
@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using UCStatistics.Services
@using UCStatistics.Shared.DTOs
@using UCStatistics.Components.Tables
@using MudBlazor
@using UCStatistics.Components.Filters

@inject ReportService ReportService
@inject IDialogService DialogService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<PageTitle>Historical Statistics</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Historical Statistics</MudText>

<!-- Filter Summary Card -->
<MudCard Class="mb-4">
    <MudCardContent>
        <!-- Filter Button -->
        <MudIconButton Icon="@Icons.Material.Filled.FilterList"
                       Color="Color.Inherit"
                       onclick="OpenFilterDialog"
                       Title="Open Filters" />
        <MudText Typo="Typo.h6" Class="mb-2">Current Filters:</MudText>
        <MudText>
            <strong>Date Range:</strong> @criteria.DateFrom.ToString("yyyy-MM-dd") to @criteria.DateTo.ToString("yyyy-MM-dd")
        </MudText>
        @if (criteria.Level3Nr.HasValue)
        {
            <MudText>
                <strong>Area:</strong> @GetAreaName(criteria.Level3Nr.Value)
            </MudText>
        }
        @if (criteria.Level2Nr.HasValue)
        {
            <MudText>
                <strong>City:</strong> @GetCityName(criteria.Level2Nr.Value)
            </MudText>
        }
        @if (criteria.OfficeNr.HasValue)
        {
            <MudText>
                <strong>Branch:</strong> @GetOfficeName(criteria.OfficeNr.Value)
            </MudText>
        }
        else
        {
            <MudText>
                <strong>Branch:</strong> All Branches
            </MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Color="Color.Primary"
                   Variant="Variant.Filled"
                   OnClick="LoadData"
                   StartIcon="@Icons.Material.Filled.Refresh">
            Refresh Data
        </MudButton>
    </MudCardActions>
</MudCard>

@if (isLoading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="mb-4" />
    <MudAlert Severity="Severity.Info">Loading historical data...</MudAlert>
}
else if (data != null && data.Any())
{
    <MudCard>
        <MudCardContent>
            <div style="overflow-x: auto;">
                <SummaryTable Data="data" />
            </div>
        </MudCardContent>
    </MudCard>
}
else if (data != null)
{
    <MudAlert Severity="Severity.Warning">
        No data available for @criteria.DateFrom.ToString("yyyy-MM-dd") to @criteria.DateTo.ToString("yyyy-MM-dd").
    </MudAlert>
}

@code {
    [CascadingParameter] public FilterCriteria GlobalFilterCriteria { get; set; }

    private List<OfficeInfo> officesList = new();
    private FilterCriteria criteria = new FilterCriteria();
    private IEnumerable<SummaryDto> data;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        officesList = (await ReportService.GetOfficesAsync()).ToList();

        if (GlobalFilterCriteria != null)
        {
            criteria = new FilterCriteria
                {
                    DateFrom = GlobalFilterCriteria.DateFrom,
                    DateTo = GlobalFilterCriteria.DateTo,
                    Level2Nr = GlobalFilterCriteria.Level2Nr,
                    Level3Nr = GlobalFilterCriteria.Level3Nr,
                    OfficeNr = GlobalFilterCriteria.OfficeNr
                };
        }

        await LoadData();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (GlobalFilterCriteria != null && HasFilterChanged())
        {
            criteria = new FilterCriteria
                {
                    DateFrom = GlobalFilterCriteria.DateFrom,
                    DateTo = GlobalFilterCriteria.DateTo,
                    Level2Nr = GlobalFilterCriteria.Level2Nr,
                    Level3Nr = GlobalFilterCriteria.Level3Nr,
                    OfficeNr = GlobalFilterCriteria.OfficeNr
                };
            await LoadData();
        }
    }

    private bool HasFilterChanged()
    {
        return criteria.DateFrom != GlobalFilterCriteria.DateFrom ||
               criteria.DateTo != GlobalFilterCriteria.DateTo ||
               criteria.Level2Nr != GlobalFilterCriteria.Level2Nr ||
               criteria.Level3Nr != GlobalFilterCriteria.Level3Nr ||
               criteria.OfficeNr != GlobalFilterCriteria.OfficeNr;
    }

    private async Task LoadData()
    {
        Console.WriteLine($"LoadData called: {DateTime.Now}");
        isLoading = true;
        StateHasChanged();

        try
        {
            data = await ReportService.GetHistoricalAsync(criteria);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetAreaName(int level3Nr)
    {
        return officesList.FirstOrDefault(x => x.Level3Nr == level3Nr)?.Level3Name ?? "Unknown";
    }

    private string GetCityName(int level2Nr)
    {
        return officesList.FirstOrDefault(x => x.Level2Nr == level2Nr)?.Level2Name ?? "Unknown";
    }

    private string GetOfficeName(int officeNr)
    {
        return officesList.FirstOrDefault(x => x.OfficeNr == officeNr)?.OfficeName ?? "Unknown";
    }

    private async Task OpenFilterDialog(MouseEventArgs e)
    {
        var result = await DialogService.ShowMessageBox(
        "Test",
        "Δουλεύει το dialog?",
        yesText: "Ναι",
        cancelText: "Όχι");

        Console.WriteLine($"Dialog result: {result}");
    //     var parameters = new DialogParameters
    //         {
    //             { "FilterCriteria", new FilterCriteria {
    //         DateFrom  = criteria.DateFrom,
    //         DateTo    = criteria.DateTo,
    //         Level2Nr  = criteria.Level2Nr,
    //         Level3Nr  = criteria.Level3Nr,
    //         OfficeNr  = criteria.OfficeNr
    //     } },
    //     { "Areas", officesList }
    //         };

    //     var options = new DialogOptions
    //         {
    //             MaxWidth = MaxWidth.Medium,
    //             FullWidth = true,
    //             CloseButton = true
    //         };

    //     var dialog = await DialogService.ShowAsync<FilterDialog>("Filter Options", parameters, options);
    //     var result = await dialog.Result;

    //     if (!result.Canceled && result.Data is FilterCriteria newCriteria)
    //     {
    //         criteria = newCriteria;
    //         await LoadData();
    //     }
     }

}