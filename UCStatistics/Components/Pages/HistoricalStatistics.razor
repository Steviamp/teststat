@rendermode InteractiveServer
@page "/historical"

@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using UCStatistics.Services
@using UCStatistics.Shared.DTOs
@using UCStatistics.Components.Tables
@using MudBlazor

@inject ReportService ReportService
@inject IDialogService DialogService

<MudThemeProvider />
<MudSnackbarProvider MaxDisplayedSnackbars="3" PreventDuplicates="true" />
<MudDialogProvider />
<MudPopoverProvider />

<PageTitle>Historical Statistics</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Historical Statistics</MudText>

<!-- Filter Summary Card -->
<MudCard Class="mb-4">
    <MudCardContent>
        <MudPaper Elevation="1" Class="pa-4 mb-4">
            <MudGrid GutterSize="GutterSize.Small" AlignItems="Center" Justify="Justify.FlexStart">
                <!-- Date From -->
                <MudItem xs="12" sm="5" md="3">
                    <MudDatePicker Label="Date From"
                    Date="criteria.DateFrom"
                    DateChanged="d => OnDateChanged(d, true)"
                    Variant="Variant.Outlined"
                    Clearable="false" />
                </MudItem>
                <!-- Date To -->
                <MudItem xs="12" sm="5" md="3">
                    <MudDatePicker Label="Date To"
                    Date="criteria.DateTo"
                    DateChanged="d => OnDateChanged(d, false)"
                    Variant="Variant.Outlined"
                    Clearable="false" />
                </MudItem>

                <!-- Branch Filter -->
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                    Label="Branch"
                    Placeholder="All Branches"
                    Value="criteria.OfficeNr"
                    ValueChanged="OnBranchChanged"
                    ValueExpression="() => criteria.OfficeNr"
                    Clearable="true"
                    Variant="Variant.Outlined">
                        <!-- default “All Branches” when null -->
                        <MudSelectItem T="int?" Value="@( (int?)null )">
                            All Branches
                        </MudSelectItem>
                        @foreach (var b in BranchOptions)
                        {
                            <MudSelectItem T="int?" Value="@b.Id">
                                @b.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <!-- Area Filter -->
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                    Label="Area"
                    Placeholder="All Areas"
                    Value="criteria.Level3Nr"
                    ValueChanged="OnAreaChanged"
                    ValueExpression="() => criteria.Level3Nr"
                    Clearable="true"
                    Variant="Variant.Outlined">
                        <!-- “All Areas” when null -->
                        <MudSelectItem T="int?" Value="@( (int?)null )">
                            All Areas
                        </MudSelectItem>
                        @foreach (var a in AreaOptions)
                        {
                            <MudSelectItem T="int?" Value="@a.Id">
                                @a.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <!-- City Filter -->
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                    Label="City"
                    Placeholder="All Cities"
                    Value="criteria.Level2Nr"
                    ValueChanged="OnCityChanged"
                    ValueExpression="() => criteria.Level2Nr"
                    Clearable="true"
                    Variant="Variant.Outlined">
                        <MudSelectItem T="int?" Value="@( (int?)null )">
                            All Cities
                        </MudSelectItem>
                        @foreach (var c in CityOptions)
                        {
                            <MudSelectItem T="int?" Value="@c.Id">
                                @c.Name
                            </MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <!-- Service Filter -->
                @if (IsServiceTabActive){
                <MudItem xs="12" sm="4" md="2">
                    <MudSelect T="int?"
                               Label="Service"
                               Value="criteria.ServiceCode"
                               ValueChanged="OnServiceChanged"
                               ValueExpression="() => criteria.ServiceCode"
                               Clearable="true"
                               Variant="Variant.Outlined">
                        <MudSelectItem T="int?" Value="@( (int?)null )">All Services</MudSelectItem>
                        @foreach (var s in ServiceOptions)
                        {
                            <MudSelectItem T="int?" Value="@s.Id">@s.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                }
            </MudGrid>
        </MudPaper>
    </MudCardContent>
</MudCard>

<MudTabs Rounded="true" ActivePanelIndexChanged="@(index => OnTabChanged(index))">
    <MudTabPanel Text="By Branch">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h6">Branch Statistics</MudText>
            <div class="d-flex gap-2">
                <MudButton Color="Color.Success"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="ExportBranchData"
                           Disabled="!(data?.Any() ?? false)">
                    Export to Excel
                </MudButton>
                <MudButton Color="Color.Success"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="ExportIndividualTicketsData"
                           Disabled="!(data?.Any() ?? false)">
                    Export Individual tickets to Excel
                </MudButton>
            </div>
        </div>
        @if (isLoading)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else if (data?.Any() ?? false)
        {
            <SummaryTable Data="data" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No data for selected filters.</MudAlert>
        }

    </MudTabPanel>

    <MudTabPanel Text="By Service">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h6">Service Statistics</MudText>
            <MudButton Color="Color.Success"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Download"
                       OnClick="ExportServiceData"
                       Disabled="!(serviceData?.Any() ?? false)">
                Export to Excel
            </MudButton>
        </div>
        @if (isServiceLoading)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else if (serviceData?.Any() ?? false)
        {
            <ServiceSummaryTable Data="serviceData" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No service data for selected filters.</MudAlert>
        }

    </MudTabPanel>
</MudTabs>

@code {
    @inject IJSRuntime JSRuntime
    @inject ExcelExportService ExcelService
    private int activeTabIndex = 0;
    private bool IsServiceTabActive => activeTabIndex == 1;
    private List<OfficeInfo> officesList = new();
    private List<ServiceInfo> servicesList = new();
    
    private FilterCriteria criteria = new FilterCriteria
        {
            DateFrom = DateTime.Today.AddDays(-7),
            DateTo = DateTime.Today
        };

    private IEnumerable<SummaryDto> data;
    private bool isLoading;

    private IEnumerable<ServiceSummaryDto> serviceData;
    private bool isServiceLoading;

    protected override async Task OnInitializedAsync()
    {
        officesList = (await ReportService.GetOfficesAsync()).ToList();
        servicesList = (await ReportService.GetServicesAsync()).ToList();
        await LoadData();
    }
    private IEnumerable<(int Id, string Name)> BranchOptions
    => officesList
        .Select(x => (x.OfficeNr, x.OfficeName))
        .Distinct();

    private async Task OnBranchChanged(int? newBranch)
    {
        criteria.OfficeNr = newBranch;
        await LoadCurrentTab();
    }

    private async Task OnDateChanged(DateTime? date, bool isFrom)
    {
        if (date is null) return;
        if (isFrom)
            criteria.DateFrom = date.Value;
        else
            criteria.DateTo = date.Value;
        await LoadCurrentTab();
    }

    private IEnumerable<(int Id, string Name)> AreaOptions =>
        officesList
        .Select(x => (x.Level3Nr, x.Level3Name))
        .Distinct();

    private async Task OnAreaChanged(int? newArea)
    {
        criteria.Level3Nr = newArea;
        if (newArea == null)
            criteria.OfficeNr = null;

        await LoadCurrentTab();
    }

    private IEnumerable<(int Id, string Name)> CityOptions =>
    officesList
      .Where(o => criteria.Level3Nr == null || o.Level3Nr == criteria.Level3Nr)
      .Select(o => (o.Level2Nr, o.Level2Name))
      .Distinct();

    private async Task OnCityChanged(int? newCity)
    {
        criteria.Level2Nr = newCity;
        if (newCity == null)
            criteria.OfficeNr = null;

        await LoadCurrentTab();
    }

    private IEnumerable<(int Id, string Name)> ServiceOptions
      => servicesList.Select(s => (s.ServiceCode, s.ServiceName)).Distinct();

    private async Task OnServiceChanged(int? svc)
    {
        criteria.ServiceCode = svc;
        await LoadCurrentTab();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        data = await ReportService.GetHistoricalAsync(criteria);

        isLoading = false;
        StateHasChanged();
    }

    private async Task LoadServiceData()
    {
        isServiceLoading = true;
        StateHasChanged();

        serviceData = await ReportService.GetServiceSummaryAsync(criteria);

        isServiceLoading = false;
        StateHasChanged();
    }

    private async Task LoadCurrentTab()
    {
        if (activeTabIndex == 0)
            await LoadData();
        else
            await LoadServiceData();
    }

    private async Task OnTabChanged(int index)
    {
        activeTabIndex = index;
        await LoadCurrentTab();
    }


    private async Task ExportBranchData()
    {
        try
        {
            var excelData = await ReportService.ExportSummaryToExcelAsync(criteria);
            var fileName = $"Branch_Summary_{criteria.DateFrom:yyyy-MM-dd}_to_{criteria.DateTo:yyyy-MM-dd}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            // Handle error - you could show a snackbar here
            Console.WriteLine($"Export error: {ex.Message}");
        }

    }

    private async Task ExportIndividualTicketsData()
    {
        try
        {
            var excelData = await ReportService.ExportIndividualTicketsToExcelAsync(criteria);
            var fileName = $"Tickets_Summary_{criteria.DateFrom:yyyy-MM-dd}_to_{criteria.DateTo:yyyy-MM-dd}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            // Handle error - you could show a snackbar here
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task ExportServiceData()
    {
        try
        {
            var excelData = await ReportService.ExportServiceSummaryToExcelAsync(criteria);
            var fileName = $"Service_Summary_{criteria.DateFrom:yyyy-MM-dd}_to_{criteria.DateTo:yyyy-MM-dd}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task DownloadFileAsync(byte[] fileData, string fileName)
    {
        var base64 = Convert.ToBase64String(fileData);
        await JSRuntime.InvokeVoidAsync("downloadFile", base64, fileName);
    }
}