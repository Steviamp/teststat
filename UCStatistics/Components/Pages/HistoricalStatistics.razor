@rendermode InteractiveServer
@page "/historical"

@using System
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using Microsoft.AspNetCore.Components
@using UCStatistics.Components.Filters
@using UCStatistics.Services
@using UCStatistics.Shared.DTOs
@using UCStatistics.Components.Tables
@using UCStatistics.Models
@using MudBlazor

@inject ReportService ReportService
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@inject ExcelExportService ExcelService

<PageTitle>Historical Statistics</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Historical Statistics</MudText>

<!-- Filter Component -->
<CascadingValue Value="CurrentUser">
    <FilterComponent Criteria="@criteria"
                     CriteriaChanged="@OnCriteriaChanged"
                     OfficesList="@officesList"
                     ServicesList="@servicesList"
                     ShowDateFilters="true"
                     ShowServiceFilter="@IsServiceTabActive" />
</CascadingValue>

<MudTabs Rounded="true" ActivePanelIndexChanged="@(index => OnTabChanged(index))">
    <MudTabPanel Text="By Branch">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h6">Branch Statistics</MudText>
            <div class="d-flex gap-2">
                <MudButton Color="Color.Success"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="ExportBranchData"
                           Disabled="!(data?.Any() ?? false)">
                    Export to Excel
                </MudButton>
                <MudButton Color="Color.Success"
                           Variant="Variant.Filled"
                           StartIcon="@Icons.Material.Filled.Download"
                           OnClick="ExportIndividualTicketsData"
                           Disabled="!(data?.Any() ?? false)">
                    Export Individual tickets to Excel
                </MudButton>
            </div>
        </div>
        @if (isLoading)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else if (data?.Any() ?? false)
        {
            <SummaryTable Data="data" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No data for selected filters.</MudAlert>
        }
    </MudTabPanel>

    <MudTabPanel Text="By Service">
        <div class="d-flex justify-space-between align-center mb-3">
            <MudText Typo="Typo.h6">Service Statistics</MudText>
            <MudButton Color="Color.Success"
                       Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Download"
                       OnClick="ExportServiceData"
                       Disabled="!(serviceData?.Any() ?? false)">
                Export to Excel
            </MudButton>
        </div>
        @if (isServiceLoading)
        {
            <MudProgressLinear Indeterminate="true" />
        }
        else if (serviceData?.Any() ?? false)
        {
            <ServiceSummaryTable Data="serviceData" />
        }
        else
        {
            <MudAlert Severity="Severity.Warning">No service data for selected filters.</MudAlert>
        }
    </MudTabPanel>
</MudTabs>

@code {
    [CascadingParameter] public ActiveDirectoryUserDto? CurrentUser { get; set; }

    private int activeTabIndex = 0;
    private bool IsServiceTabActive => activeTabIndex == 1;
    private List<OfficeInfo> officesList = new();
    private List<ServiceInfo> servicesList = new();

    private FilterCriteria criteria = new FilterCriteria
        {
            DateFrom = DateTime.Today.AddDays(-7),
            DateTo = DateTime.Today
        };

    private IEnumerable<SummaryDto> data;
    private bool isLoading;

    private IEnumerable<ServiceSummaryDto> serviceData;
    private bool isServiceLoading;

    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadOfficesAndServices();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnInitializedAsync: {ex.Message}");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            if (!isInitialized)
            {
                Console.WriteLine($"OnParametersSetAsync - CurrentUser: {CurrentUser?.UserName}, Role: {CurrentUser?.Role}");
                await LoadCurrentTab();
                isInitialized = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in OnParametersSetAsync: {ex.Message}");
        }
    }

    private async Task LoadOfficesAndServices()
    {
        try
        {
            officesList = (await ReportService.GetOfficesAsync()).ToList();
            servicesList = (await ReportService.GetServicesAsync()).ToList();

            // Filter offices based on user role
            if (CurrentUser?.Role == UserRole.Supervisor && !string.IsNullOrEmpty(CurrentUser.SupervisorBranch))
            {
                if (int.TryParse(CurrentUser.SupervisorBranch, out int branchNumber))
                {
                    officesList = officesList.Where(o => o.OfficeNr == branchNumber).ToList();
                    criteria.OfficeNr = branchNumber;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading offices and services: {ex.Message}");
            officesList = new List<OfficeInfo>();
            servicesList = new List<ServiceInfo>();
        }
    }

    // Event handler for filter changes
    private async Task OnCriteriaChanged(FilterCriteria newCriteria)
    {
        criteria = newCriteria;
        await LoadCurrentTab();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            data = await ReportService.GetHistoricalAsync(criteria, CurrentUser);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading historical data: {ex.Message}");
            data = Enumerable.Empty<SummaryDto>();
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadServiceData()
    {
        isServiceLoading = true;
        StateHasChanged();

        try
        {
            serviceData = await ReportService.GetServiceSummaryAsync(criteria, CurrentUser);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading service data: {ex.Message}");
            serviceData = Enumerable.Empty<ServiceSummaryDto>();
        }
        finally
        {
            isServiceLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadCurrentTab()
    {
        try
        {
            Console.WriteLine($"LoadCurrentTab called - CurrentUser: {CurrentUser?.UserName}, Role: {CurrentUser?.Role}");

            if (activeTabIndex == 0)
                await LoadData();
            else
                await LoadServiceData();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error in LoadCurrentTab: {ex.Message}");
        }
    }

    private async Task OnTabChanged(int index)
    {
        activeTabIndex = index;
        await LoadCurrentTab();
    }

    private async Task ExportBranchData()
    {
        try
        {
            Console.WriteLine($"ExportBranchData - CurrentUser: {CurrentUser?.UserName}");
            var excelData = await ReportService.ExportSummaryToExcelAsync(criteria, CurrentUser);
            var fileName = $"Branch_Summary_{criteria.DateFrom:yyyy-MM-dd}_to_{criteria.DateTo:yyyy-MM-dd}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task ExportIndividualTicketsData()
    {
        try
        {
            Console.WriteLine($"ExportIndividualTicketsData - CurrentUser: {CurrentUser?.UserName}");
            var excelData = await ReportService.ExportIndividualTicketsToExcelAsync(criteria, CurrentUser);
            var fileName = $"Tickets_Summary_{criteria.DateFrom:yyyy-MM-dd}_to_{criteria.DateTo:yyyy-MM-dd}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task ExportServiceData()
    {
        try
        {
            Console.WriteLine($"ExportServiceData - CurrentUser: {CurrentUser?.UserName}");
            var excelData = await ReportService.ExportServiceSummaryToExcelAsync(criteria, CurrentUser);
            var fileName = $"Service_Summary_{criteria.DateFrom:yyyy-MM-dd}_to_{criteria.DateTo:yyyy-MM-dd}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private async Task DownloadFileAsync(byte[] fileData, string fileName)
    {
        var base64 = Convert.ToBase64String(fileData);
        await JSRuntime.InvokeVoidAsync("downloadFile", base64, fileName);
    }
}