@using MudBlazor
@using UCStatistics.Shared.DTOs
@inject IJSRuntime JSRuntime

<div class="d-flex gap-2">
    @if (ShowBranchExport && BranchData?.Any() == true)
    {
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Download"
                   OnClick="ExportBranchData"
                   Disabled="IsLoading">
            @BranchExportText
        </MudButton>
    }

    @if (ShowServiceExport && ServiceData?.Any() == true)
    {
        <MudButton Color="Color.Success"
                   Variant="Variant.Filled"
                   StartIcon="@Icons.Material.Filled.Download"
                   OnClick="ExportServiceData"
                   Disabled="IsLoading">
            @ServiceExportText
        </MudButton>
    }
</div>

@code {
    [Parameter] public IEnumerable<LiveBranchDto>? BranchData { get; set; }
    [Parameter] public IEnumerable<LiveServiceDto>? ServiceData { get; set; }
    [Parameter] public FilterCriteria Criteria { get; set; } = new();
    [Parameter] public string BranchExportText { get; set; } = "Export Branch Data";
    [Parameter] public string ServiceExportText { get; set; } = "Export Service Data";
    [Parameter] public bool ShowBranchExport { get; set; } = true;
    [Parameter] public bool ShowServiceExport { get; set; } = true;
    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public EventCallback<string> OnExportError { get; set; }

    private async Task ExportBranchData()
    {
        try
        {
            var excelData = await ExportLiveBranchToExcel(BranchData);
            var fileName = $"Live_Branch_Data_{DateTime.Now:yyyy-MM-dd_HHmm}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            await OnExportError.InvokeAsync($"Branch export error: {ex.Message}");
        }
    }

    private async Task ExportServiceData()
    {
        try
        {
            var excelData = await ExportLiveServiceToExcel(ServiceData);
            var fileName = $"Live_Service_Data_{DateTime.Now:yyyy-MM-dd_HHmm}.xlsx";
            await DownloadFileAsync(excelData, fileName);
        }
        catch (Exception ex)
        {
            await OnExportError.InvokeAsync($"Service export error: {ex.Message}");
        }
    }

    private async Task<byte[]> ExportLiveBranchToExcel(IEnumerable<LiveBranchDto> data)
    {
        // Εδώ θα χρειαστείτε να προσθέσετε τη λογική για το Excel export
        // Μπορείτε να χρησιμοποιήσετε την ExcelExportService ή να φτιάξετε νέες μεθόδους
        await Task.Delay(100); // Placeholder
        return new byte[0];
    }

    private async Task<byte[]> ExportLiveServiceToExcel(IEnumerable<LiveServiceDto> data)
    {
        // Εδώ θα χρειαστείτε να προσθέσετε τη λογική για το Excel export
        await Task.Delay(100); // Placeholder
        return new byte[0];
    }

    private async Task DownloadFileAsync(byte[] fileData, string fileName)
    {
        if (fileData?.Length > 0)
        {
            var base64 = Convert.ToBase64String(fileData);
            await JSRuntime.InvokeVoidAsync("downloadFile", base64, fileName);
        }
    }
}
