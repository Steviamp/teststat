@inherits LayoutComponentBase
@using UCStatistics.Shared.DTOs
@using UCStatistics.Services
@using UCStatistics.Models
@using MudBlazor
@inject ReportService ReportService
@inject AuthenticationService AuthService
@inject IHttpContextAccessor HttpContextAccessor

<MudThemeProvider />
<MudSnackbarProvider MaxDisplayedSnackbars="3" PreventDuplicates="true" />
<MudDialogProvider />

@if (currentUser != null)
{
    <MudLayout>
        <MudAppBar Elevation="1" Color="Color.Primary">
            <MudText Typo="Typo.h6">UniCredit Queuing Statistics</MudText>
            <MudSpacer />

            <!-- Navigation Menu -->
            <MudButton Href="/historical"
            Variant="@GetVariant("/historical")"
            Color="@GetColor("/historical")"
            StartIcon="@Icons.Material.Filled.BarChart"
            Class="mr-2">
                Historical
            </MudButton>

            <MudButton Href="/live"
            Variant="@GetVariant("/live")"
            Color="@GetColor("/live")"
            StartIcon="@Icons.Material.Filled.AccessTime"
            Class="mr-2">
                Live
            </MudButton>

            <MudButton Href="/settings"
            Variant="@GetVariant("/settings")"
            Color="@GetColor("/settings")"
            StartIcon="@Icons.Material.Filled.Settings"
            Class="mr-4">
                Settings
            </MudButton>

            <!-- User Info -->
            <MudMenu Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" Direction="Direction.Bottom">
                <MudMenuItem>
                    <div class="d-flex flex-column">
                        <MudText Typo="Typo.body2">@currentUser.FirstName @currentUser.LastName</MudText>
                        <MudText Typo="Typo.caption">@currentUser.Email</MudText>
                        <MudText Typo="Typo.caption">@currentUser.Branch</MudText>
                    </div>
                </MudMenuItem>
            </MudMenu>
        </MudAppBar>

        <MudMainContent>
            <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
                <CascadingValue Value="GlobalFilterCriteria">
                    @Body
                </CascadingValue>
            </MudContainer>
        </MudMainContent>
    </MudLayout>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Small" Class="mt-8">
        <MudAlert Severity="Severity.Error">
            <MudText>Access Denied</MudText>
            <MudText Typo="Typo.body2">You are not authorized to access this application.</MudText>
        </MudAlert>
    </MudContainer>
}


@code {
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private ActiveDirectoryUserDto? currentUser;

    private Color GetColor(string href)
    {
        return Navigation.Uri.Contains(href)
            ? Color.Primary
            : Color.Inherit;
    } 
    private FilterCriteria GlobalFilterCriteria { get; set; } = new FilterCriteria
        {
            DateFrom = DateTime.Today.AddDays(-7),
            DateTo = DateTime.Today,
            Level2Nr = null,
            Level3Nr = null,
            OfficeNr = null
        };

    private List<OfficeInfo> OfficesList { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Get authenticated user
            if (HttpContextAccessor.HttpContext != null)
            {
                currentUser = AuthService.GetAuthenticatedUser(HttpContextAccessor.HttpContext);
            }
            if (currentUser != null)
            {
                OfficesList = (await ReportService.GetOfficesAsync()).ToList();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading offices: {ex.Message}");
        }
    }

    private Variant GetVariant(string href)
    {
        return Navigation.Uri.Contains(href) ? Variant.Filled : Variant.Text;
    }
}